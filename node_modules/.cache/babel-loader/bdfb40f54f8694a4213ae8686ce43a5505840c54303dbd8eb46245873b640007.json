{"ast":null,"code":"import Vue from 'vue';\nimport Vuex from 'vuex';\nVue.use(Vuex);\n\n// Import mock product data\nimport productData from './products.js';\nexport default new Vuex.Store({\n  state: {\n    products: [],\n    cart: [],\n    loading: false,\n    checkoutInfo: null\n  },\n  getters: {\n    allProducts: state => state.products,\n    featuredProducts: state => state.products.filter(product => product.featured),\n    relatedProducts: state => productId => state.products.filter(product => product.id !== productId).slice(0, 4),\n    productById: state => id => state.products.find(product => product.id === id),\n    cartItems: state => state.cart,\n    cartTotal: state => {\n      return state.cart.reduce((total, item) => {\n        return total + (item.salePrice || item.price) * item.quantity;\n      }, 0);\n    },\n    cartItemCount: state => state.cart.reduce((count, item) => count + item.quantity, 0),\n    isLoading: state => state.loading\n  },\n  mutations: {\n    SET_PRODUCTS(state, products) {\n      state.products = products;\n    },\n    ADD_TO_CART(state, {\n      product,\n      quantity\n    }) {\n      const existingItem = state.cart.find(item => item.id === product.id);\n      if (existingItem) {\n        existingItem.quantity += quantity;\n      } else {\n        state.cart.push({\n          ...product,\n          quantity\n        });\n      }\n\n      // Save cart to localStorage\n      localStorage.setItem('cart', JSON.stringify(state.cart));\n    },\n    REMOVE_FROM_CART(state, productId) {\n      state.cart = state.cart.filter(item => item.id !== productId);\n      localStorage.setItem('cart', JSON.stringify(state.cart));\n    },\n    UPDATE_CART_ITEM_QUANTITY(state, {\n      productId,\n      quantity\n    }) {\n      const item = state.cart.find(item => item.id === productId);\n      if (item) {\n        item.quantity = quantity;\n        localStorage.setItem('cart', JSON.stringify(state.cart));\n      }\n    },\n    CLEAR_CART(state) {\n      state.cart = [];\n      localStorage.removeItem('cart');\n    },\n    SET_LOADING(state, value) {\n      state.loading = value;\n    },\n    LOAD_CART_FROM_STORAGE(state) {\n      const savedCart = localStorage.getItem('cart');\n      if (savedCart) {\n        state.cart = JSON.parse(savedCart);\n      }\n    },\n    SAVE_CHECKOUT_INFO(state, info) {\n      state.checkoutInfo = info;\n      localStorage.setItem('checkoutInfo', JSON.stringify(info));\n    }\n  },\n  actions: {\n    loadProducts({\n      commit\n    }) {\n      commit('SET_LOADING', true);\n\n      // Simulate API call with setTimeout and return a Promise\n      return new Promise(resolve => {\n        setTimeout(() => {\n          commit('SET_PRODUCTS', productData);\n          commit('SET_LOADING', false);\n          resolve();\n        }, 500);\n      });\n    },\n    addToCart({\n      commit\n    }, {\n      product,\n      quantity = 1\n    }) {\n      commit('ADD_TO_CART', {\n        product,\n        quantity\n      });\n    },\n    removeFromCart({\n      commit\n    }, productId) {\n      commit('REMOVE_FROM_CART', productId);\n    },\n    updateCartItemQuantity({\n      commit\n    }, {\n      productId,\n      quantity\n    }) {\n      commit('UPDATE_CART_ITEM_QUANTITY', {\n        productId,\n        quantity\n      });\n    },\n    clearCart({\n      commit\n    }) {\n      commit('CLEAR_CART');\n    },\n    initializeStore({\n      commit\n    }) {\n      commit('LOAD_CART_FROM_STORAGE');\n    },\n    saveCheckoutInfo({\n      commit\n    }, info) {\n      commit('SAVE_CHECKOUT_INFO', info);\n    }\n  }\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}